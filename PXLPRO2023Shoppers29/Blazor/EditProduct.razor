
@page "/BlazorEditProduct/{id}"



<h3>Edit Product</h3>
<hr />
@if (vm != null)
{
    <div class="form-group">
        <label for="name">Id:</label>
        <input type="number" class="form-control" id="productId" @bind-value="vm.ProductId" readonly="readonly" />
    </div>
    <div class="form-group">
        <label for="name">Name:</label>
        <input type="text" class="form-control" id="name" @bind-value="vm.Name" />
    </div>
    <div class="form-group">
        <label for="description">Description:</label>
        <input type="text" class="form-control" id="description" @bind-value="vm.Description"></input>
    </div>
    <div class="form-group">
        <label for="price">Price:</label>
        <input type="number" class="form-control" id="price" @bind-value="vm.Price" />
    </div>
    <div class="form-group">
        <label for="model">Model:</label>
        <input type="text" class="form-control" id="model" @bind-value="vm.Model" />
    </div>
    <div class="form-group">
        <label for="material">Material:</label>
        <input type="text" class="form-control" id="material" @bind-value="vm.Material" />
    </div>
    <div class="form-group">
        <label for="bezel">Bezel:</label>
        <input type="text" class="form-control" id="Bezel" @bind-value="vm.Bezel" />
    </div>
    <div class="form-group">
        <label for="serialNumber">Serial Number:</label>
        <input type="text" class="form-control" id="serialNumber" @bind-value="vm.SerialNumber" readonly="readonly" />
    </div>
    <div class="form-group">
        <label for="madeDate">Made Date:</label>
        <input type="text" class="form-control" id="madeDate" @bind-value="vm.MadeDate" />
    </div>
    <div class="form-group">
        <label for="dial">Dial:</label>
        <input type="text" class="form-control" id="dial" @bind-value="vm.Dial"/>
    </div>
    <div class="form-group">
        <label for="bracelet">Bracelet:</label>
        <input type="text" class="form-control" id="bracelet" @bind-value="vm.Bracelet"/>
    </div>
    <div class="form-group">
        <label for="imageUrl">Image Url:</label>
        <input type="text" class="form-control" id="imageUrl" @bind-value="vm.ImageUrl"/>
    </div>
    <div class="form-group">
    <label for="categoryId">Category:</label>
        <select class="form-control" id="categoryId" @bind="SelectedCategoryId">
            @foreach (var category in Categories)
            {
                <option value="@category.CategoryId">@category.CategoryName</option>
            }
        </select>
    </div>
    <div class="form-group">
        <label for="stock">Stock Amount:</label>
        <input type="number" class="form-control" id="stock" @bind-value="vm.StockAmount" />
    </div>
    <button type="submit" class="btn btn-primary" @onclick="SaveProduct">Save</button>
}
else
{
    <p>Loading...</p>
}

<div>
    <a asp-action="Index">Back to List</a>
</div>

@code {
    [Parameter]
    public int Id { get; set; }
    public BlazorProductViewModel vm { get; set; }
    public List<Models.Category> Categories { get; set; }
    public int? SelectedCategoryId { get; set; }

    [Inject]
    public NavigationManager _navigationManager { get; set; }
    [Inject]
    public IProductService _productService { get; set; }
    [Inject]
    public IStockRepository _stockRepository { get; set; }
    [Inject]
    public ShopDbContext _context { get; set; }

    protected override async Task OnInitializedAsync()
    { 

        Categories = _context.ProductCategories.ToList();
        var p = await _productService.GetProductById(Id);
        SelectedCategoryId = p.CategoryId;
        var stock = _stockRepository.GetBySerialNumber(p.SerialNumber);
        BlazorProductViewModel vmBlazor = new BlazorProductViewModel()
            {
                ProductId = p.ProductId,
                Name = p.Name,
                Description = p.Description,
                Price = p.Price,
                Model = p.Model,
                Material = p.Material,
                Bezel = p.Bezel,
                SerialNumber = p.SerialNumber,
                MadeDate = p.MadeDate,
                Dial = p.Dial,
                Bracelet = p.Bracelet,
                ImageUrl = p.ImageUrl,
                Category = p.Category,
                StockAmount = stock.Amount,
                CategoryId = SelectedCategoryId

            };
        vm = vmBlazor;

    }

    private async Task SaveProduct()
    {
        // get the existing entity from the context
        var existingProduct = _context.Products.Find(vm.ProductId);

        // detach the existing entity from the context
        _context.Entry(existingProduct).State = Microsoft.EntityFrameworkCore.EntityState.Detached;


        var test =  await _productService.UpdateProduct(new Models.Product
        {
                ProductId = vm.ProductId,
                Name = vm.Name,
                Description = vm.Description,
                Price = vm.Price,
                Model = vm.Model,
                Material = vm.Material,
                Bezel = vm.Bezel,
                SerialNumber = vm.SerialNumber,
                MadeDate = vm.MadeDate,
                Dial = vm.Dial,
                Bracelet = vm.Bracelet,
                ImageUrl = vm.ImageUrl,
                CategoryId = vm.CategoryId

        });

        var stock = _stockRepository.GetBySerialNumber(vm.SerialNumber);
        stock.Amount = vm.StockAmount;
        _stockRepository.Update(stock);
        
        _navigationManager.NavigateTo("/Home/BlazorProduct");

    }
}
